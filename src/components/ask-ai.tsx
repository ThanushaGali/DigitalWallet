// This is an autogenerated file from Firebase Studio.
'use client';

import * as React from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Bot, Loader2, Send, User, Sparkles } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { askAI } from '@/app/actions';
import type { Receipt } from '@/types';
import { cn } from '@/lib/utils';
import { useToast } from '@/hooks/use-toast';

const AskAISchema = z.object({
  query: z.string().min(1, 'Please enter a question.'),
});

type AskAIFormValues = z.infer<typeof AskAISchema>;

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

interface AskAIProps {
  receipts: Receipt[];
}

export function AskAI({ receipts }: AskAIProps) {
  const [messages, setMessages] = React.useState<Message[]>([]);
  const [isLoading, setIsLoading] = React.useState(false);
  const scrollAreaRef = React.useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const { register, handleSubmit, reset, formState: { errors } } = useForm<AskAIFormValues>({
    resolver: zodResolver(AskAISchema),
  });

  const onSubmit: SubmitHandler<AskAIFormValues> = async (data) => {
    setIsLoading(true);
    const userMessage: Message = { role: 'user', content: data.query };
    setMessages(prev => [...prev, userMessage]);

    try {
      const answer = await askAI(data.query, receipts);
      const assistantMessage: Message = { role: 'assistant', content: answer };
      setMessages(prev => [...prev, assistantMessage]);
      reset();
    } catch (error: any) {
      toast({
        variant: 'destructive',
        title: 'AI Error',
        description: error.message || 'Could not get a response from the AI assistant.',
      });
      // remove the user message if the AI fails
      setMessages(prev => prev.slice(0, prev.length -1));
    } finally {
      setIsLoading(false);
    }
  };

  React.useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTo({
        top: scrollAreaRef.current.scrollHeight,
        behavior: 'smooth',
      });
    }
  }, [messages]);

  return (
    <Card className="max-w-3xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2"><Sparkles className="text-primary"/>Ask Your Financial Assistant</CardTitle>
        <CardDescription>Get instant insights by asking questions about your spending. Try "How much did I spend on dining this month?"</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col h-[500px]">
          <ScrollArea className="flex-1 p-4 border rounded-lg bg-muted/30" ref={scrollAreaRef as any}>
            {messages.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-full text-center text-muted-foreground">
                    <Bot className="h-12 w-12 mb-4" />
                    <p className="text-lg font-medium">No questions asked yet.</p>
                    <p className="text-sm">Your conversation will appear here.</p>
                </div>
            ) : (
                <div className="space-y-4">
                {messages.map((message, index) => (
                  <div key={index} className={cn('flex items-start gap-3', message.role === 'user' ? 'justify-end' : 'justify-start')}>
                    {message.role === 'assistant' && (
                      <span className="flex-shrink-0 flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground">
                        <Bot size={20} />
                      </span>
                    )}
                    <div className={cn('max-w-md p-3 rounded-lg', message.role === 'user' ? 'bg-primary/10' : 'bg-background')}>
                      <p className="text-sm">{message.content}</p>
                    </div>
                     {message.role === 'user' && (
                        <span className="flex-shrink-0 flex items-center justify-center w-8 h-8 rounded-full bg-muted">
                           <User size={20} />
                        </span>
                     )}
                  </div>
                ))}
                {isLoading && (
                     <div className="flex items-start gap-3 justify-start">
                         <span className="flex-shrink-0 flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground">
                             <Bot size={20} />
                         </span>
                         <div className="max-w-md p-3 rounded-lg bg-background flex items-center">
                             <Loader2 className="h-5 w-5 animate-spin text-muted-foreground" />
                         </div>
                     </div>
                )}
              </div>
            )}
          </ScrollArea>
          <form onSubmit={handleSubmit(onSubmit)} className="flex items-center gap-2 pt-4">
            <Input
              {...register('query')}
              placeholder="Ask anything about your receipts..."
              className="flex-1"
              disabled={isLoading}
            />
            <Button type="submit" disabled={isLoading}>
              {isLoading ? <Loader2 className="h-5 w-5 animate-spin" /> : <Send className="h-5 w-5" />}
              <span className="sr-only">Send</span>
            </Button>
          </form>
           {errors.query && <p className="text-xs text-destructive mt-1">{errors.query.message}</p>}
        </div>
      </CardContent>
    </Card>
  );
}
