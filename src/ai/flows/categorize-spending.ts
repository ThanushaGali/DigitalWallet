// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A spending categorization AI agent.
 *
 * - categorizeSpending - A function that handles the spending categorization process.
 * - CategorizeSpendingInput - The input type for the categorizeSpending function.
 * - CategorizeSpendingOutput - The return type for the categorizeSpending function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CategorySchema = z.enum([
  'Groceries',
  'Dining',
  'Travel',
  'Health',
  'Entertainment',
  'Shopping',
  'Utilities',
  'Rent',
  'Other',
]);

const CategorizeSpendingInputSchema = z.object({
  receiptData: z
    .string()
    .describe('The receipt data to categorize, including items and prices.'),
});
export type CategorizeSpendingInput = z.infer<typeof CategorizeSpendingInputSchema>;

const CategorizeSpendingOutputSchema = z.object({
  category: CategorySchema.describe('The category of spending.'),
  confidence: z
    .number()
    .describe('The confidence level of the categorization (0-1).'),
});
export type CategorizeSpendingOutput = z.infer<typeof CategorizeSpendingOutputSchema>;

export async function categorizeSpending(input: CategorizeSpendingInput): Promise<CategorizeSpendingOutput> {
  return categorizeSpendingFlow(input);
}

const prompt = ai.definePrompt({
  name: 'categorizeSpendingPrompt',
  input: {schema: CategorizeSpendingInputSchema},
  output: {schema: CategorizeSpendingOutputSchema},
  prompt: `You are an AI assistant that categorizes spending based on receipt data.

  Analyze the following receipt data and determine the most appropriate spending category.

  Receipt Data: {{{receiptData}}}

  Respond with a JSON object containing the category and a confidence score (0-1).
  Consider these categories: Groceries, Dining, Travel, Health, Entertainment, Shopping, Utilities, Rent, Other.
  `,
});

const categorizeSpendingFlow = ai.defineFlow(
  {
    name: 'categorizeSpendingFlow',
    inputSchema: CategorizeSpendingInputSchema,
    outputSchema: CategorizeSpendingOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
