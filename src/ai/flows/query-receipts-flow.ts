// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that answers questions about spending based on receipt data.
 *
 * - queryReceipts - A function that handles answering questions about receipts.
 * - QueryReceiptsInput - The input type for the queryReceipts function.
 * - QueryReceiptsOutput - The return type for the queryReceipts function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const QueryReceiptsInputSchema = z.object({
  query: z.string().describe('The user\'s question about their spending.'),
  receipts: z
    .string()
    .describe('A JSON string representation of an array of receipt objects.'),
});
export type QueryReceiptsInput = z.infer<typeof QueryReceiptsInputSchema>;

const QueryReceiptsOutputSchema = z.object({
  answer: z
    .string()
    .describe('A natural language answer to the user\'s question.'),
});
export type QueryReceiptsOutput = z.infer<typeof QueryReceiptsOutputSchema>;

export async function queryReceipts(
  input: QueryReceiptsInput
): Promise<QueryReceiptsOutput> {
  return queryReceiptsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'queryReceiptsPrompt',
  input: {schema: QueryReceiptsInputSchema},
  output: {schema: QueryReceiptsOutputSchema},
  prompt: `You are a helpful financial assistant. Your role is to answer questions about a user's spending based on a provided list of their receipts.

  Here is the user's question:
  "{{{query}}}"

  Here is the user's receipt data in JSON format:
  {{{receipts}}}

  Analyze the receipts and provide a clear, concise, and friendly answer to the user's question. If the question cannot be answered with the given data, say so politely.
  Base your answer ONLY on the data provided. Do not make up information.
  When referring to money, use the format â‚¹XXX.XX.
  `,
});

const queryReceiptsFlow = ai.defineFlow(
  {
    name: 'queryReceiptsFlow',
    inputSchema: QueryReceiptsInputSchema,
    outputSchema: QueryReceiptsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
